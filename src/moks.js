export const Start = [
  {
    title: "HTML",
    question:
      "Какие основные элементы используются в HTML для создания структуры веб-страницы?",
    answer:
      "Основные элементы включают: <html>, <head>, <body>, <header>, <footer>, <main>, <section>, <article>, <div>, <p>, <h1>–<h6>, <ul>, <ol>.",
  },
  {
    question:
      "Что такое теги в HTML, и как они используются для обозначения различных элементов контента?",
    answer:
      "Теги — это элементы, которые определяют структуру и содержание веб-страницы, например: <p> для параграфов.",
  },
  {
    question: "Как вставить текстовый контент на веб-страницу в HTML?",
    answer:
      "Используйте теги <p> для параграфов или <span> для выделения текста.",
  },
  {
    question:
      "Что такое вложенность тегов в HTML, и как она влияет на структуру страницы?",
    answer:
      "Вложенность — это размещение одного тега внутри другого, что улучшает семантику и доступность.",
  },
  {
    question:
      "Какие атрибуты можно использовать в HTML для дополнительной настройки элементов?",
    answer: "Атрибуты: id, class, style, src, href, alt, title.",
  },
  {
    question: "Как создать параграфы на веб-странице с помощью HTML?",
    answer: "Используйте тег <p> для создания параграфов.",
  },
  {
    question: "Как изменить начертание текста на веб-странице с помощью HTML?",
    answer:
      "Используйте <b>, <strong> для жирного текста и <i>, <em> для курсивного.",
  },
  {
    question:
      "Как создать заголовки различных уровней в HTML, и для чего они используются?",
    answer: "Используйте теги <h1>–<h6> для заголовков разной важности.",
  },
  {
    question: "Как создать списки в HTML, и какие типы списков существуют?",
    answer:
      "Маркированные списки создаются с помощью <ul>, нумерованные — <ol>.",
  },
  {
    question: "Как создать вложенные списки на веб-странице с помощью HTML?",
    answer: "Вложите <ul> или <ol> внутрь элемента <li>.",
  },
  {
    title: "CSS",
    question:
      "Что такое каскадные таблицы стилей (CSS), и как они используются для оформления веб-страниц?",
    answer:
      "CSS — это язык для стилизации HTML-документов: изменение цветов, шрифтов, отступов и других параметров.",
  },
  {
    question:
      "Как встраивать CSS в HTML и какие методы подключения стилей существуют?",
    answer:
      "Методы: встроенные (inline), внутренние (внутри <style>), внешние файлы (с помощью <link>).",
  },
  {
    question:
      "Что такое наследование стилей в CSS, и как оно влияет на оформление элементов на веб-странице?",
    answer:
      "Наследование позволяет дочерним элементам автоматически принимать некоторые свойства (например, color).",
  },
  {
    question:
      "Как записывать стили непосредственно в теге style элемента HTML?",
    answer: "Через атрибут style, например: style='color: red;'.",
  },
  {
    question:
      "Какие базовые стили применяются к различным тегам HTML по умолчанию?",
    answer:
      "Заголовки — жирный шрифт, <p> — отступы, списки — маркеры или номера.",
  },
  {
    question:
      "Как создавать и использовать классы в CSS для применения стилей к группе элементов?",
    answer:
      "Определите класс в CSS (.classname) и добавьте его в HTML через атрибут class.",
  },
  {
    question:
      "Что такое селекторы в CSS, и как они используются для выбора элементов на веб-странице?",
    answer: "Селекторы выбирают элементы по тегу, классу (.class), id (#id).",
  },
  {
    question:
      "Как работает каскадность стилей в CSS, и как определяется приоритет применения стилей?",
    answer: "Приоритет: инлайн-стили > id > классы > теги.",
  },
  {
    question:
      "Какие способы задания цветов доступны в CSS, и как выбрать цвет для элемента на веб-странице?",
    answer: "Цвет можно задать в формате #hex, rgb(), hsl() или по имени.",
  },
  {
    question:
      "Как управлять выравниванием текста, размером шрифта, начертанием и другими типографическими параметрами с помощью CSS?",
    answer:
      "Используются свойства text-align, font-size, font-weight, font-style.",
  },
  {
    title: "JavaScript",
    question: "Какова разница между оператором == и === в JavaScript?",
    answer: "== сравнивает значения, === сравнивает значения и типы.",
  },
  {
    question:
      "Какие типы данных поддерживаются в JavaScript, и как они отличаются друг от друга?",
    answer:
      "Примитивные: string, number, boolean, null, undefined, symbol, bigint; объектные: object, array, function.",
  },
  {
    question:
      "Что такое логические операторы в JavaScript, и как они используются для управления потоком программы?",
    answer: "Операторы &&, ||, ! используются для выполнения условий.",
  },
  {
    question:
      "Какие арифметические операции доступны в JavaScript, и как они выполняются?",
    answer: "Операции: +, -, *, /, %, **.",
  },
  {
    question:
      "Что такое условные операторы в JavaScript, и как они используются для принятия решений в программе?",
    answer: "Условные операторы: if, else if, else, switch.",
  },
  {
    question:
      "Какие типы ошибок могут возникнуть при работе с переменными в JavaScript, и как их можно избежать?",
    answer:
      "Ошибки: синтаксические, ссылочные, логические. Избегайте неправильного объявления и опечаток.",
  },
  {
    question:
      "Какие методы доступны для обработки строк в JavaScript, и как они могут быть использованы для манипуляции текстом?",
    answer:
      "Методы: .length, .toUpperCase(), .toLowerCase(), .substring(), .split().",
  },
  {
    question:
      "Как объявлять и вызывать функции в JavaScript, и какие параметры могут быть переданы в функцию?",
    answer: "Объявление: function name(param) { ... }. Вызов: name(value).",
  },
  {
    question:
      "Что такое циклы в JavaScript, и как они используются для повторного выполнения блока кода?",
    answer:
      "Циклы: for, while, do...while используются для повторения действий.",
  },
  {
    question:
      "Какие особенности и синтаксический сахар предоставляет JavaScript для более удобной и компактной записи кода?",
    answer:
      "Стрелочные функции, деструктуризация, шаблонные строки, операторы ?., ??.",
  },
];

export const HTMLCSSbeginner = [

        {
      question: "Что такое HTML?",
      answer: "Язык разметки для создания веб-страниц.",
    },
    {
      question: "Что такое HTML-тег?",
      answer: "Часть HTML-элемента, заключенная в угловые скобки.",
    },
    {
      question: "Каковы три части HTML-элемента?",
      answer: "Открывающий тег, содержимое, закрывающий тег.",
    },
    {
      question: "Какова цель декларации doctype в HTML?",
      answer:
        "Сообщить браузеру, какую версию HTML использовать для отображения документа.",
    },

        {
        title: "HTML Элементы и структура",
      question: "Что такое пустой элемент в HTML?",
      answer: "Элемент, который не имеет закрывающего тега.",
    },
    {
      question: "Что представляет собой элемент HTML?",
      answer:
        "Контейнер для содержимого, заключенный в открывающие и закрывающие теги.",
    },
    {
      question: "Какова цель элемента <head> в HTML-документе?",
      answer:
        "Хранить мета-информацию о веб-странице и информацию для корректного отображения.",
    },
    {
      question:
        "Какой элемент должен быть в каждом HTML-документе, чтобы указать кодировку символов?",
      answer: '<meta charset="UTF-8">.',
    },
    {
      question: "Что делает элемент <body> в HTML-документе?",
      answer:
        "Содержит весь видимый контент страницы, такой как текст и изображения.",
    },
      {
        title: "HTML Текст и стилизация",
      question: "Как создать абзац в HTML?",
      answer: "Оборачивая текст в тег <p>.",
    },
    {
      question:
        "Какой элемент следует использовать, чтобы сделать текст жирным и важным?",
      answer: "<strong>.",
    },
    {
      question:
        "Какой элемент следует использовать, чтобы сделать текст курсивным и выделить его?",
      answer: "<em>.",
    },
    {
      question: "Как создать HTML-комментарии?",
      answer: "<!-- Ваш комментарий -->.",
    },
      {
        title: "CSS Основы",
      question: "Для чего используется CSS?",
      answer: "Для стилизации HTML-элементов.",
    },
    {
      question: "Что такое селектор класса в CSS?",
      answer: "Выбор элемента по классу.",
    },
    {
      question:
        "Какой синтаксис используется для указания идентификатора элемента в CSS?",
      answer: "#id-name.",
    },
    {
      question:
        "Какой символ в CSS используется для выбора всех элементов на странице?",
      answer: "*",
    },
      {
        title: "CSS Модель блока",
      question:
        "Какое свойство CSS увеличивает пространство между содержимым блока и его границей?",
      answer: "padding.",
    },
    {
      question:
        "Какое свойство CSS увеличивает пространство между границами блока и границами других блоков?",
      answer: "margin.",
    },
    {
      question: "Что делает свойство border в модели блока?",
      answer: "Добавляет цвет и толщину линии вокруг блока.",
    },
    {
      question:
        "Какой порядок свойств в модели блока от внутреннего к внешнему?",
      answer: "padding, border, margin.",
    },

        {
        title: "CSS Flexbox",
      question: "Что такое контейнер Flex в CSS?",
      answer: "Элемент с display: flex.",
    },
    {
      question: "Какой элемент считается элементом Flex?",
      answer: "Элемент с display: block.",
    },
    {
      question: "Что делает свойство flex-grow?",
      answer: "Определяет, как элемент должен расти в контейнере.",
    },
    {
      question:
        "Какое свойство используется для выравнивания элементов вдоль поперечной оси?",
      answer: "align-items.",
    },
]

export const HTMLCSSintermediate = [
  {
    title: "Основы HTML и CSS",
    question: "Почему важно углубляться в изучение HTML и CSS?",
    answer: "Чтобы понять и воссоздать любой веб-дизайн.",
  },
  {
    question: "Что такое CSS-шпаргалка и как она может помочь?",
    answer: "Это список всех CSS-свойств и значений.",
  },
  {
    question:
      "Какой плагин встроен в VS Code для упрощения написания HTML и CSS?",
    answer: "Emmet.",
  },
  {
    question:
      "Какой код Emmet используется для генерации базовой структуры HTML?",
    answer: "`!`.",
  },
  {
    question:
      "Какой синтаксис Emmet используется для создания элемента `<p class='text'></p>`?",
    answer: "`p.text`.",
  },
  {
    question: "Какой синтаксис Emmet создаст элемент `<div><p></p></div>`?",
    answer: "`div>p`.",
  },
  {
    title: "SVG",
    question: "Когда использование SVG может быть нецелесообразным?",
    answer:
      "Когда изображение должно быть фотореалистичным или содержит сложные текстуры.",
  },
  {
    question:
      "Какой атрибут в SVG указывает на использование языка спецификации SVG?",
    answer: "`xmlns`.",
  },
  {
    question:
      "Какие преимущества имеет встраивание SVG в HTML по сравнению с их связыванием?",
    answer:
      "Встраивание позволяет динамически изменять изображение с помощью CSS или JavaScript.",
  },
  {
    question:
      "Какая особенность SVG делает их особенно полезными для веб-дизайна?",
    answer: "SVG масштабируемы без потери качества.",
  },
  {
    question:
      "В чем основное отличие между растровыми и векторными форматами изображений?",
    answer:
      "Растровые изображения состоят из пикселей, векторные - из математических формул.",
  },
  {
    title: "HTML-таблицы",
    question: "Что такое таблица?",
    answer: "Элемент HTML для создания двумерных данных из строк и столбцов.",
  },
  {
    question:
      "Почему использование HTML-таблиц для макета страницы - это плохая идея?",
    answer:
      "Таблицы не предназначены для макета и могут нарушить семантику и доступность страницы.",
  },
  {
    question: "Для чего полезны элементы заголовка (`<caption>`) в таблице?",
    answer: "Для предоставления описания таблицы.",
  },
  {
    question: "Что такое атрибут `scope`?",
    answer:
      "Атрибут, который указывает, к каким ячейкам относятся заголовки таблицы.",
  },
  {
    title: "CSS-ресеты и Normalize.css",
    question: "Что делает сброс CSS?",
    answer: "Удаляет или изменяет стандартные стили браузеров.",
  },
  {
    question:
      "Какой популярный сброс CSS полностью удаляет все стандартные стили?",
    answer: "The Meyer Reset.",
  },
  {
    question: "Что делает Normalize.css по сравнению с другими сбросами CSS?",
    answer: "Корректирует стандартные стили для обеспечения согласованности.",
  },
  {
    question: "Какая статья упоминает несколько популярных сбросов CSS?",
    answer: "Reboot, Resets and Reasoning.",
  },
  {
    question:
      "Какой метод рекомендуется для установки Normalize.css, если ссылка на загрузку не работает?",
    answer: "Загрузить файл напрямую с сайта.",
  },
  {
    title: "Шрифты и базовые стили",
    question: "Какие способы добавления шрифтов ты знаешь?",
    answer: "`link` и `@import`.",
  },
  {
    question:
      "Какое свойство вы бы использовали, чтобы сделать элемент прозрачным?",
    answer: "`opacity`.",
  },
  {
    question:
      "Какое свойство вы бы использовали, чтобы сделать фоновое изображение плиткой?",
    answer: "`background-repeat`.",
  },
  {
    question:
      "Какое свойство вы бы использовали, чтобы добавить полосы прокрутки к элементу?",
    answer: "`overflow`.",
  },
  {
    question:
      "Какое свойство вы бы использовали, чтобы добавить тень за элементом?",
    answer: "`box-shadow`.",
  },
  {
    question:
      "Какое свойство вы бы использовали, чтобы создать закругленные углы у элемента?",
    answer: "`border-radius`.",
  },
  {
    title: "CSS-селекторы и псевдоэлементы",
    question:
      "Какой селектор выбирает только непосредственных потомков элемента?",
    answer: "`main > div`.",
  },
  {
    question:
      "Какой псевдокласс применяется к элементу, который в данный момент выбран пользователем?",
    answer: `:focus.`,
  },
  {
    question:
      "Какой псевдокласс применим к элементам, которые в данный момент нажимаются пользователем?",
    answer: `:active.`,
  },
  {
    question:
      "Какой селектор используется для выбора первого ребенка элемента?",
    answer: `:first-child.`,
  },
  {
    question:
      "Какой псевдоэлемент позволяет стилизовать первую букву текста в элементе?",
    answer: `::first-letter.`,
  },
  {
    question:
      "Какой псевдоэлемент позволяет добавить содержимое перед содержимым элемента?",
    answer: `::before.`,
  },
  {
    title: "CSS-позиционирование",
    question:
      "В чем основное отличие между `position: static` и `position: relative`?",
    answer:
      "`position: static` не реагирует на свойства `top`, `right`, `bottom`, `left`, тогда как `position: relative` позволяет смещать элемент относительно его обычного положения.",
  },
  {
    question: "Какое поведение у элемента с `position: absolute`?",
    answer:
      "Элемент удаляется из нормального потока документа и позиционируется относительно родительского элемента.",
  },
  {
    question:
      "Для чего наиболее подходяще использование фиксированного позиционирования (`position: fixed`)?",
    answer:
      "Для элементов, которые должны оставаться на месте относительно `viewport` при прокрутке.",
  },
  {
    question:
      "Какое поведение у элемента с 'липким' позиционированием (`position: sticky`)?",
    answer:
      "Элемент ведет себя как обычный элемент до тех пор, пока его не прокрутят мимо, после чего он фиксируется.",
  },
  {
    title: "CSS-функции",
    question: "Какое назначение функции `calc()` в CSS?",
    answer:
      "Выполняет математические вычисления для определения значений стилей.",
  },
  {
    question: "Как работает функция `min()` в CSS?",
    answer: "Выбирает наименьшее значение из переданных параметров.",
  },
  {
    question: "Что делает функция `clamp()` в CSS?",
    answer:
      "Определяет минимальное, идеальное и максимальное значения для свойства.",
  },
  {
    title: "Пользовательские свойства (CSS-переменные)",
    question: "Как объявляется пользовательское свойство?",
    answer:
      "С помощью двойного дефиса перед именем, например, `--text-color: blue;`.",
  },
  {
    question:
      "Где вы бы объявили пользовательское свойство, чтобы его область видимости была глобальной?",
    answer: "Внутри селектора `:root`.",
  },
  {
    question:
      "Где бы вы объявили пользовательское свойство, чтобы учитывать настройку темы пользователя?",
    answer: "Внутри медиа-запроса `prefers-color-scheme`.",
  },
  {
    title: "Браузеры",
    question: "Какой в настоящее время самый используемый браузер?",
    answer: "Chrome.",
  },
  {
    question: "Какое было первоначальное название первого веб-браузера?",
    answer: "WorldWideWeb.",
  },
  {
    question: "В чем различия между мобильными браузерами на iOS и Android?",
    answer:
      "Safari на iOS использует движок WebKit, а Android-браузеры могут использовать разные движки.",
  },
  {
    question:
      "Какое основное различие в поддержке веб-технологий между Safari на iOS и браузерами на Android?",
    answer:
      "Safari на iOS использует только WebKit, в то время как Android поддерживает разные движки.",
  },
  {
    title: "CSS-фреймворки и методологии",
    question: "Что такое CSS-фреймворк?",
    answer: "Набор предварительно написанных стилей и компонентов.",
  },
  {
    question: "Какой фреймворк фокусируется на утилитарном подходе в CSS?",
    answer: "Tailwind.",
  },
  {
    question: "Какие проблемы решает методология БЭМ?",
    answer: "Организация и поддержка стилей в больших проектах.",
  },
  {
    question: "Что такое 'Блок' в контексте БЭМ?",
    answer:
      "Минимальная единица стилей, которая может быть повторно использована.",
  },
  {
    title: "CSS Grid и Flexbox",
    question: "Какой основной смысл использования CSS Grid в веб-дизайне?",
    answer: "Упрощение создания двумерных макетов.",
  },
  {
    question: "Когда был представлен CSS Grid во всех основных браузерах?",
    answer: "В 2017 году.",
  },
  {
    question:
      "Какое свойство в CSS Grid позволяет устанавливать промежутки между элементами?",
    answer: "`gap`.",
  },
  {
    question:
      "Что происходит, когда в сетке больше контента, чем определенных треков?",
    answer: "CSS Grid автоматически добавляет неявные треки.",
  },
  {
    question: "Когда лучше использовать `Flexbox` вместо `Grid`?",
    answer: "Для однолинейных макетов.",
  },
  {
    question: "Когда лучше использовать `Grid` вместо `Flexbox`?",
    answer: "Для двумерных макетов.",
  },
  {
    question: "Какое преимущество дает комбинация `Flexbox` и `Grid`?",
    answer: "Гибкость в управлении содержимым внутри двумерных макетов.",
  },
  {
    question: "Когда лучше использовать `Grid` и `Flexbox` вместе?",
    answer:
      "Для сложных макетов, где требуется контроль в двух измерениях и гибкость внутри элементов.",
  },
];

export const HTMLCSSadvanced = [
  {
    title: "Свойство `transform` и трансформации в CSS",
    question: "Что такое свойство `transform` в CSS?",
    answer:
      "Свойство для изменения внешнего вида элементов без воздействия на естественный поток документа.",
  },
  {
    question: "Какие функции трансформации относятся к 2D трансформациям?",
    answer: "rotate, scale, skew, translate.",
  },
  {
    question: "Какой порядок применения функций трансформации имеет значение?",
    answer: "Функции применяются справа налево.",
  },
  {
    question:
      "Почему свойство `transform` важно для производительности веб-страниц?",
    answer:
      "Поскольку оно используется во время компоновки и поддерживает аппаратное ускорение.",
  },
  {
    title: "Переходы и анимации в CSS",
    question: "Что такое переход CSS?",
    answer: "Анимация изменения от начального состояния к конечному.",
  },
  {
    question:
      "Какое свойство определяет, какое CSS-свойство будет анимировано?",
    answer: "transition-property.",
  },
  {
    question:
      "Почему важно использовать только `opacity` и `transform` для анимаций?",
    answer: "Они обеспечивают максимальную производительность анимаций.",
  },
  {
    question: "Какое свойство задает задержку перед началом перехода?",
    answer: "transition-delay.",
  },
  {
    question: "В чем основное отличие между переходами CSS и анимациями CSS?",
    answer: "Анимации не требуют триггера для запуска.",
  },
  {
    question: "Какое свойство определяет продолжительность анимации в CSS?",
    answer: "animation-duration.",
  },
  {
    title: "Веб-доступность (Accessibility)",
    question: "Что означает термин 'веб-доступность'?",
    answer:
      "Обеспечение использования веб-сайтов людьми с ограниченными возможностями.",
  },
  {
    question: "Какие ограничения могут влиять на доступность веб-сайтов?",
    answer: "Слуховые и зрительные.",
  },
  {
    question: "Почему важна веб-доступность?",
    answer:
      "Она позволяет пользователям с ограниченными возможностями использовать сайт без проблем.",
  },
  {
    question: "Что может быть примером ситуационного ограничения?",
    answer: "Использование телефона на ярком солнце.",
  },
  {
    question:
      "Какие преимущества предоставляет доступность для всех пользователей?",
    answer: "Упрощение навигации.",
  },
  {
    title: "Оптимизация производительности веб-страниц",
    question: "Что такое Reflow в контексте веб-страниц?",
    answer: "Пересчет размеров и позиций всех элементов.",
  },
  {
    question: "Когда происходит Repaint?",
    answer: "При изменении цвета фона или текста.",
  },
  {
    question:
      "Какую роль играют инструменты разработчика в оптимизации производительности?",
    answer: "Они анализируют и оптимизируют производительность страницы.",
  },
  {
    title: "Рекомендации по доступности контента в сети (WCAG)",
    question:
      "Какова основная цель Рекомендаций по доступности контента в сети (WCAG)?",
    answer: "Создать общий стандарт в области веб-доступности.",
  },
  {
    question: "Каковы четыре принципа WCAG?",
    answer: "Воспринимаемость, управляемость, понимаемость, надежность.",
  },
  {
    question: "Почему семантический HTML важен для доступности?",
    answer: "Он придает смысл и контекст элементам для ассистивных технологий.",
  },
  {
    question:
      "Каковы семь HTML-элементов, определяющих ключевые точки на странице?",
    answer: "<aside>, <footer>, <form>, <header>, <main>, <nav>, <section>.",
  },
  {
    question: "Почему важно связывать элементы ввода с <label>?",
    answer:
      "Это увеличивает область для нажатия и предоставляет контекст для ассистивных технологий.",
  },
  {
    question: "Какой атрибут следует использовать для указания типа ввода?",
    answer: "type.",
  },
  {
    question:
      "Что произойдет, если использовать только <div> вместо семантических элементов на странице?",
    answer:
      "Пользователи с экранными дикторами не смогут легко навигировать по странице.",
  },
  {
    question:
      "Какой элемент следует использовать для представления списка элементов?",
    answer: "<ul> или <ol>.",
  },
  {
    title: "Цвета и контраст",
    question: "Что такое коэффициент контраста?",
    answer: "Разница в яркости между двумя цветами.",
  },
  {
    question:
      "Какой инструмент можно использовать для проверки коэффициента контраста?",
    answer: "WebAIM Contrast Checker.",
  },
  {
    question:
      "Почему нельзя полагаться только на цвет для передачи информации?",
    answer: "Не все пользователи могут различать цвета.",
  },
  {
    title: "Интерактивность и фокус",
    question:
      "Какие две вещи должны иметь интерактивные элементы для пользователей, использующих клавиатуру?",
    answer: "Фокусируемость и обработка событий.",
  },
  {
    question: "Что такое стили фокуса?",
    answer: "Визуальные индикаторы фокуса элемента.",
  },
  {
    question: "Почему нельзя полностью удалять стили фокуса с элемента?",
    answer:
      "Это может сделать страницу недоступной для пользователей клавиатуры.",
  },
  {
    question:
      "Каков лучший способ скрытия скрытого контента от технологий помощи?",
    answer: "Использовать display: none или visibility: hidden.",
  },
  {
    question:
      "Какие три правила вы должны следовать, чтобы предоставлять значимые ссылки?",
    answer:
      "- Избегать общих фраз. - Указывать на содержание ссылки. - Информировать о типе файла или открытии в новой вкладке.",
  },
  {
    question:
      "Какую информацию вы должны сообщить пользователям, чтобы предоставлять значимые сообщения об ошибках в формах?",
    answer: "Какой ввод вызвал ошибку и как её исправить.",
  },
  {
    title: "Работа с изображениями",
    question:
      "Когда следует использовать пустую строку/значение null для атрибута alt?",
    answer:
      "Когда изображение является декоративным или несущественным для контента.",
  },
  {
    title: "Адаптивный дизайн",
    question: "Что такое адаптивный дизайн?",
    answer:
      "Создание веб-сайтов, которые адаптируются к изменениям размера браузера для работы на любых устройствах.",
  },
  {
    question:
      "Какой минимальной ширины экран должен поддерживать адаптивный сайт?",
    answer: "320px.",
  },
  {
    question: "Почему важен адаптивный дизайн?",
    answer: "Для обеспечения корректного отображения на различных устройствах.",
  },
  {
    question: "Какой метод используется для создания адаптивного дизайна?",
    answer: "Применение медиа-запросов в CSS.",
  },
  {
    question: "Какой подход не является частью адаптивного дизайна?",
    answer:
      "Использование отдельных страниц для мобильных и десктопных версий.",
  },
  {
    question:
      "Какую максимальную ширину обычно рекомендуется устанавливать для контента адаптивного сайта?",
    answer: "1200px.",
  },
  {
    question:
      "Почему фиксированная ширина является проблемой для отзывчивых сайтов?",
    answer: "Она делает элементы неадаптивными для меньших экранов.",
  },
  {
    question:
      "Что предпочтительнее использовать вместо фиксированной высоты для элементов?",
    answer: "min-height.",
  },
  {
    title: "Инструменты и свойства для адаптивного дизайна",
    question: "Какое свойство CSS было создано для гибких макетов?",
    answer: "flexbox, grid.",
  },
  {
    question:
      "В каких случаях может быть уместно использовать фиксированную ширину?",
    answer: "Для значков и небольших элементов.",
  },
  {
    question:
      "Какое свойство CSS позволяет контролировать размеры изображений?",
    answer: "background-position, background-size.",
  },
  {
    question:
      "Как правильно установить размеры изображения без искажения его пропорций?",
    answer: "Установить width и height, но оставить height на auto.",
  },
  {
    question:
      "Почему важно предоставлять разные изображения для разных разрешений экрана?",
    answer:
      "- Чтобы уменьшить время загрузки. - Чтобы улучшить качество изображения. - Чтобы обеспечить лучшую отзывчивость.",
  },
];


//--------------------------JS

export const jsIntermediate = [
    {
      title: "— Git и GitFlow",
      question: "Какие основные ветки в GitFlow?",
      answer: `
        - main: стабильная версия приложения.
        - develop: основная ветка разработки.
        - feature: ветка для разработки новой функциональности.
        - release: ветка подготовки к релизу.
        - hotfix: ветка для исправления критических ошибок.
      `
    },
    {
      question: "Как создать новую ветку для фичи?",
      answer: "Создайте новую ветку от develop, дайте ей имя, соответствующее задаче."
    },
    {
      question: "Как завершить релиз в GitFlow?",
      answer: "Слейте release в main и develop, удалите ветку release."
    },
    {
      question: "Как создать ветку hotfix?",
      answer: "Создайте ветку от main, внесите исправления, затем слейте в main и develop."
    },
    {
      question: "Как безопасно объединить изменения?",
      answer: "Используйте merge, чтобы сохранить историю, или rebase, чтобы сделать историю линейной."
    },
    
    {
      title: "— JavaScript: области видимости, замыкания",
      question: "Что такое область видимости?",
      answer: "Это доступность переменных в разных частях кода: глобальная, локальная, блочная."
    },
  {
      question: "Различия функциональной и блочной областей?",
      answer: "Функциональная — для var, блочная — для let и const."
  },
  {
      question: "Что такое замыкания?",
      answer: "Это функция, которая сохраняет доступ к переменным из внешней области, даже после её выполнения."
  },
  {
      question: "Недостатки функций-конструкторов?",
      answer: "Нет приватных свойств, сложный синтаксис."
  },
  {
      question: "Что такое фабричные функции?",
      answer: "Это функции, создающие объекты с приватными переменными."
  },
  {
      question: "Что такое IIFE?",
      answer: "Немедленно вызываемая функция для изоляции переменных."
  },
  {
      question: "Разница между классами и функциями?",
      answer: "Классы удобнее для наследования, функции проще для базовых объектов."
  },
  {
      question: "Как работают геттеры и сеттеры?",
      answer: "Они позволяют управлять доступом и изменением свойств объекта."
  },
  {
      question: "Что такое замыкание в фабричных функциях?",
      answer: "Это механизм создания приватных свойств внутри объекта."
  },
  {
      question: "Как работает this?",
      answer: "Значение зависит от контекста вызова: метод, функция или стрелочная функция."
  },
    {
          title: "Классы, наследование и прототипы",
            question: "Что такое прототипы?",
            answer: "Механизм наследования объектов через prototype."
        },
        {
            question: "Как использовать Object.create?",
            answer: "Для создания объекта с указанным прототипом."
        },
        {
            question: "Что такое наследование классов?",
            answer: "Это возможность создавать дочерние классы с помощью extends."
        },
        {
            question: "Что делает super()?",
            answer: "Вызывает конструктор родительского класса."
        },
        {
            question: "Чем композиция лучше наследования?",
            answer: "Она гибче и позволяет комбинировать поведение объектов."
        },
            {
                title: "npm и сборка проекта",
                  question: "Что такое npm?",
                  answer: "Менеджер пакетов для установки и управления зависимостями."
              },
              {
                  question: "Что делает npm init?",
                  answer: "Создаёт файл package.json для управления проектом."
              },
              {
                  question: "Как установить пакет?",
                  answer: "Локально: для конкретного проекта. Глобально: для системы в целом."
              },
              {
                  question: "Что такое webpack?",
                  answer: "Это инструмент для объединения модулей в один файл."
              },
              {
                  question: "Что такое транспиляция?",
                  answer: "Преобразование современного кода в старый формат для поддержки старыми браузерами."
              },
      {
            title: "Асинхронный JavaScript",
              question: "Что такое колбэки?",
              answer: "Функции, передаваемые как аргументы другим функциям для выполнения после завершения задачи."
          },
          {
              question: "Чем промисы лучше колбэков?",
              answer: "Они устраняют вложенность ('ад колбэков') и делают код читаемым, упрощая управление цепочками асинхронных операций."
          },
          {
              question: "Как работает метод `.then()`?",
              answer: "Метод обрабатывает результат промиса: первый аргумент для успешного выполнения, второй — для ошибок."
          },
          {
              question: "Что делает ключевое слово `async`?",
              answer: "Объявляет функцию асинхронной, автоматически оборачивая возвращаемое значение в промис."
          },
          {
              question: "Что возвращает функция `async`?",
              answer: "Всегда возвращает промис, позволяя работать с асинхронным кодом синхронно через `await`."
          },
          {
              question: "Как обрабатывать ошибки в `async`/`await`?",
              answer: "Используйте `try-catch`, чтобы поймать исключения внутри асинхронной функции."
          },
          {
              question: "Что такое CORS?",
              answer: "Механизм безопасности, ограничивающий доступ к ресурсам из другого домена. Решается настройкой заголовков сервера или использованием прокси."
          },
          {
              question: "Как валидировать данные в HTML-формах?",
              answer: "Используйте атрибуты (`required`, `pattern`) и JavaScript для проверки и обработки ошибок."
          },
      {
            title: "Дополнительные концепции",
              question: "Что такое JSON и как с ним работать?",
              answer: "Формат обмена данными. Используйте `JSON.stringify` для преобразования объекта в строку и `JSON.parse` для обратного."
          },
          {
              question: "Что такое рекурсия?",
              answer: "Функция, вызывающая саму себя. Используется для задач вроде вычисления факториала."
          },
          {
              question: "Что такое ES6?",
              answer: "Версия JavaScript с улучшениями: стрелочные функции, `let`/`const`, шаблонные строки."
          },
          {
              question: "Что такое API?",
              answer: "Интерфейс взаимодействия. Для отправки запросов используйте методы вроде `fetch`."
          },
          {
              question: "Что такое модули в JavaScript?",
              answer: "Позволяют разделять код. `export default` используется для одного экспорта, именованные — для нескольких."
          },
          {
              question: "Как использовать `fetch` для получения данных?",
              answer: "Отправьте GET-запрос и обработайте ответ через `.then` или `async`/`await`."
          },
          {
              question: "Что такое IIFE?",
              answer: "Функция, вызываемая сразу после создания, чтобы изолировать переменные."
          },
          {
              question: "Что такое Single Responsibility Principle (SRP)?",
              answer: "Каждая функция/модуль должна выполнять одну задачу. Избегайте смешивания логики."
          },
          {
              question: "Что такое SOLID?",
              answer: "Принципы разработки: SRP, OCP, LSP, ISP, DIP. Упрощают сопровождение и расширение кода."
          },
          {
              question: "Чем фабричные функции лучше классов?",
              answer: "Гибче за счёт создания объектов без жёсткой структуры и наследования."
          },
          {
              question: "Как работает метод `.reduce()`?",
              answer: "Применяет функцию к элементам массива, возвращая итоговое значение (например, сумму)."
          },
          {
              question: "Что такое чистая функция?",
              answer: "Функция без побочных эффектов, возвращающая одинаковый результат при одинаковых входных данных."
          }
      ]


export  const jsBeginner = [
        {
              title: "Объявление переменных",
                question: "Как объявлять переменные в JavaScript?",
                answer: "Переменные объявляют с помощью ключевых слов `var`, `let` или `const."
            },
            {
                question: "Какие существуют три способа объявления переменных?",
                answer: "Используются `var`, `let` и `const`."
            },
            {
                question: "Когда использовать var, let или const?",
                answer: "`var` — для глобальной области видимости. `let` — для изменяемых значений. `const` — для неизменяемых значений."
            },
            {
                question: "Какие правила именования переменных существуют?",
                answer: "Имена переменных должны начинаться с буквы, `$` или `_` и не могут содержать пробелов или специальных символов."
            },
        {
              title: "Операторы и операции",
                question: "Что такое операторы, операнды и операции?",
                answer: "Операторы выполняют действия, операнды — значения, к которым они применяются."
            },
            {
                question: "Как работает конкатенация в JavaScript?",
                answer: "Объединяет строки с помощью оператора `+`."
            },
            {
                question: "Что произойдет, если сложить строку и число?",
                answer: "Число преобразуется в строку, и произойдет конкатенация."
            },
            {
                question: "Какие типы операторов существуют в JavaScript?",
                answer: "Арифметические, логические, сравнения, присваивания и побитовые."
            },
            {
                question: "В чем разница между == и ===?",
                answer: "`==` сравнивает значения, а `===` сравнивает значения и типы данных."
            },
            {
                question: "Как определяется приоритет операторов?",
                answer: "Операторы выполняются согласно их приоритету, описанному в таблице приоритетов."
            },
            {
                question: "Что такое операторы инкремента и декремента?",
                answer: "Это операторы увеличения (`++`) и уменьшения (`--`) значения."
            },
            {
                question: "В чем разница между префиксной и постфиксной формами?",
                answer: "Префиксная возвращает новое значение, постфиксная — старое."
            },
            {
                question: "Какие существуют операторы присваивания?",
                answer: "Примеры: `=`, `+=`, `-=`, `*=`, `/=`."
            },
            {
                question: "Что делает унарный оператор плюса?",
                answer: "Преобразует значение в число."
            },
        {
              title: "Типы данных",
                question: "Какие восемь типов данных существуют в JavaScript?",
                answer: "`number`, `string`, `boolean`, `null`, `undefined`, `object`, `symbol`, `bigint`."
            },
            {
                question: "Чем отличаются одинарные, двойные и обратные кавычки?",
                answer: "Одинарные и двойные кавычки одинаковы, обратные позволяют вставлять переменные."
            },
            {
                question: "Как вставлять переменные в строки?",
                answer: "Использовать шаблонные строки: `${переменная}` в обратных кавычках."
            },
            {
                question: "Какие методы строк наиболее часто используются?",
                answer: "Примеры: `length`, `toUpperCase`, `toLowerCase`, `trim`, `slice`."
            },
        {
              title: "Логика и условия",
                question: "Какие логические операторы существуют в JavaScript?",
                answer: "Примеры: `&&`, `||`, `!`."
            },
            {
                question: "Как работают операторы сравнения?",
                answer: "Сравнивают значения с результатом `true` или `false`."
            },
            {
                question: "Как создаются условные конструкции?",
                answer: "Использовать `if`, `else if`, `else` или `switch`."
            },
            {
                question: "Что такое вложенные условия?",
                answer: "Это условия внутри других условий."
            },
            {
                question: "Как определить истинные и ложные значения?",
                answer: "Ложные значения: `0`, `null`, `undefined`, `NaN`, `false`, пустая строка. Остальные — истинные."
            },
            {
                question: "Что такое регулярные выражения и как их использовать?",
                answer: "Регулярные выражения — это шаблоны для поиска текста, используются с методами строк."
            },
            {
                question: "Какие существуют основные условные конструкции?",
                answer: "`if`, `else if`, `else`, `switch`, тернарный оператор."
            },
              {
              title: "Инструменты разработчика",
                question: "Как изменить размер экрана веб-сайта с помощью инструментов разработчика?",
                answer: "Включить режим устройства в DevTools."
            },
            {
                question: "Как просматривать и изменять DOM с помощью DevTools?",
                answer: "Использовать вкладку 'Элементы' для редактирования HTML."
            },
            {
                question: "Как отлаживать JavaScript-код?",
                answer: "Устанавливать точки останова в DevTools и анализировать шаги."
            },
            {
                question: "Как использовать точки останова в JavaScript?",
                answer: "Ставить их в DevTools для остановки выполнения кода."
            },
            {
                question: "Как редактировать HTML во вкладке 'Элементы'?",
                answer: "Изменять элементы прямо в окне разработчика."
            },
            {
                question: "Как анализировать панель ресурсов для проверки выполняемых скриптов?",
                answer: "Проверять запросы во вкладке 'Сеть' в DevTools."
            },
            {
                question: "Как добавить псевдосостояние CSS к классу?",
                answer: "Включить псевдосостояние в DevTools (например, `:hover`)."
            },
            {
                question: "Как отображать свойства CSS в алфавитном порядке?",
                answer: "Включить опцию сортировки в DevTools."
            },
            {
                question: "Как редактировать модель блока элемента в Chrome DevTools?",
                answer: "Использовать вкладку 'Элементы' и изменять размер, отступы, границы."
            },
            {
                question: "Как просматривать страницу в режиме печати?",
                answer: "Открыть режим предварительного просмотра печати через DevTools."
            },
            {
                question: "Как включить или отключить CSS-классы через DevTools?",
                answer: "Вкладка 'Элементы' позволяет включать или отключать классы."
            },
            {
                question: "Как моделировать медиа-запросы в режиме устройства?",
                answer: "Использовать эмуляцию устройств в DevTools."
            },
              {
              title: "Функции и область видимости",
                question: "Что такое функции и как их определять?",
                answer: "Функции — это блоки кода, определяемые с помощью `function`."
            },
            {
                question: "Как работает ключевое слово return?",
                answer: "Возвращает значение из функции."
            },
            {
                question: "Что такое область видимости функций?",
                answer: "Это область, в которой доступны переменные."
            },
        {
              title: "Ошибки и отладка",
                question: "Что представляет собой процесс Problem Solving?",
                answer: "Решение задач через анализ, тестирование и исправление."
            },
            {
                question: "Какие существуют виды ошибок в JavaScript?",
                answer: "Синтаксические, логические, runtime-ошибки."
            },
            {
                question: "Как распознать место происхождения ошибки?",
                answer: "Использовать сообщения об ошибках или отладчик."
            },
            {
                question: "Как искать и устранять ошибки в JavaScript?",
                answer: "Анализировать код, использовать DevTools и тестирование."
            },
        {
              title: "Чистый код",
                question: "Что делает код трудочитаемым или легкочитаемым?",
                answer: "Использование читаемых имен, форматирования и комментариев."
            },
            {
                question: "Как писать чистый код, следуя принципам программирования?",
                answer: "Делить код на функции, избегать дублирования."
            },
            {
                question: "Как писать хорошие комментарии в коде?",
                answer: "Объяснять сложные части, избегать очевидного."
            },
        {
              title: "Массивы и циклы",
                question: "Как создавать и использовать массивы?",
                answer: "Создавать с помощью `[]` и работать с элементами."
            },
            {
                question: "Какие встроенные методы массивов наиболее полезны?",
                answer: "Примеры: `push`, `pop`, `shift`, `map`, `filter`."
            },
            {
                question: "Как работают циклы в JavaScript?",
                answer: "Выполняют код несколько раз: `for`, `while`."
            },
        {
              title: "Работа с DOM",
                question: "Что такое DOM в контексте веб-страницы?",
                answer: "Это структура HTML-документа в виде объектов."
            },
            {
                question: "Чем отличается 'узел' от 'элемента'?",
                answer: "Узел — любая часть DOM, элемент — HTML-тег."
            },
            {
                question: "Как выбирать узлы с помощью CSS-селекторов?",
                answer: "Использовать методы `querySelector` и `querySelectorAll`."
            },
            {
                question: "Какие методы поиска, добавления, удаления и изменения узлов DOM существуют?",
                answer: "Например, `append`, `remove`, `replaceChild`."
            },
            {
                question: "Чем отличается 'список узлов' от 'массива узлов'?",
                answer: "Список узлов похож на массив, но не имеет всех его методов."
            },
            {
                question: "Что такое всплытие событий, и как оно работает?",
                answer: "Событие поднимается от дочернего элемента к родительскому."
            },
        {
              title: "Объекты и их свойства",
                question: "Как создавать объекты в JavaScript?",
                answer: "С помощью `{}` или `new Object()`."
            },
            {
                question: "Как получать доступ к свойствам объекта?",
                answer: "Через `.` или `[]`."
            },
            {
                question: "Какие операторы объектов можно использовать?",
                answer: "Примеры: `delete`, `in`, `Object.keys`."
            },
            {
                question: "Какие функции массивов являются наиболее мощными и часто используемыми?",
                answer: "Примеры: `map`, `filter`, `reduce`."
            },
        {
              title: "Дополнительно: TDD и Jest",
                question: "Какие основы TDD стоит знать начинающим?",
                answer: "Писать тесты до написания кода."
            },
            {
                question: "Как начать работать с Jest?",
                answer: "Установить Jest и писать тесты в файлах `*.test.js`."
            },
            {
                question: "Как написать базовые тесты с помощью Jest?",
                answer: "Использовать функции `test` и `expect`."
            },
            {
                question: "Какие базовые упражнения подходят для практики TDD?",
                answer: "Начать с простых функций: сложение, проверка палиндромов."
            }
        ]
  